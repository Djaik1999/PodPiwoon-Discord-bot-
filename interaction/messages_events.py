from settings import bot, base, json, string
from .custom_functions import check_word_for_event_typing


# @bot.event
# async def on_message(message):
#     await bot.process_commands(message)
#     if message[0] == bot.command_prefix:
#         return
#
#     # prevent looping bot (answer at self messages)
#     if message.author != bot.user:
#         # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
#         if message.content.casefold().startswith('—Ç—ã '):
#             m = message.content[3:]
#             await message.reply(f"–°–∞–º {m}")
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–∞
#         # VER 1
#         # clean_message = {i.lower().translate(str.maketrans('', '', string.punctuation)) \
#         #                  for i in message.content.split(' ')}
#
#         # if clean_message.intersection(set(json.load(open('info/cenz.json')))) != set():
#         #     await message.channel.send(f' {message.author.mention}, —É—É—É... –∫–æ–≥–æ –ø–æ–≥—É–±–∞–º –æ—Ç—à–ª—ë–ø–∞—Ç—å?? –ò –Ω–µ –ø–∏—à–∏ –≤ {message.channel} –±–æ–ª—å—à–µ, –æ—Ç —Ç–µ–±—è –≥–æ–≤–Ω–æ–π –≤–∞–Ω—è–µ—Ç!')
#
#         # VER 2
#         test = string.punctuation + ' '
#         clean_message = message.content.lower().translate(str.maketrans('', '', test))
#         for m in set(json.load(open('info/cenz.json'))):
#             if clean_message.find(m) != -1:
#                 await message.channel.send(f' {message.author.mention}, —É—É—É... –∫–æ–≥–æ –ø–æ–≥—É–±–∞–º –æ—Ç—à–ª—ë–ø–∞—Ç—å?? –ò –Ω–µ –ø–∏—à–∏ –≤ {message.channel} –±–æ–ª—å—à–µ, –æ—Ç —Ç–µ–±—è –≥–æ–≤–Ω–æ–π –≤–∞–Ω—è–µ—Ç!')
#                 break


        # # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        # if message.content.casefold().startswith('—Ç—ã '):
        #     m = message.content[3:]
        #     await message.reply(f"–°–∞–º {m}")
        #
        # # –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –∫–ª–∞—Å—Å—ã, —Ñ—É–Ω–∫—Ü–∏—é
        # elif message.content.casefold() == "–≥—Ä–∞—Ü":
        #     await message.channel.send(
        #         f"–ü–∞–¥–∏—Ç–µ –Ω–∏—Ü –≥–Ω–∏–ª—å –∏ –±—É–¥—å—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª–∏—Ü–µ–∑—Ä–µ—Ç—å –º–µ–Ω—è"
        #     )
        # elif message.content.casefold().startswith('—è '):
        #     await message.reply(f'{message.author.mention} {message.content[2:]}')
        #
        # elif message.content.casefold() == '–æ—Ç–≤–∞–ª–∏':
        #     await message.channel.send("–ü–æ–Ω—è–ª, –∑—Ä—è –±—ã–∫–∞–Ω—É–ª")
        #     await bot.close()
        #
        # word = check_word_for_event_typing(message.content)
        # elif word:
        #     await message.channel.send(word)
        #
        # elif message.content.lower() in ['—á–∏—Å–ª–æ –ø–∏', '–ø–∏', 'pi', '—á–∏—Å–ª–æ p', '—á–∏—Å–ª–æ –ø', '—á–∏—Å–ª–æ pi']:
        #     await message.channel.send(pi)
        #
        # # –ü—Ä–∏–º–µ—Ä —Å wait_for
        # if message.content.startswith('$thumb'):
        #     channel = message.channel
        #     await channel.send('Send me that üëç reaction, mate')
        #
        #     def check(reaction, user):
        #         return user == message.author and str(reaction.emoji) == 'üëç'
        #
        #     try:
        #         reaction, user = await bot.wait_for('reaction_add', timeout=60.0, check=check)
        #     except asyncio.TimeoutError:
        #         await channel.send('üëé')
        #     else:
        #         await channel.send('üëç')

        # –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥ (–∫–æ—Ç–æ—Ä—ã–µ —á–µ—Ä–µ–∑ PREFIX)
        # await bot.process_commands(message)


# @bot.event
# async def on_message_delete(message):
#     await message.channel.send(f'–ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "{message.content}" by "{message.author}"')



# @bot.event
# async def on_typing(channel, user, when):
#     await channel.send(f"–ü–æ—Å—Ç–æ—Ä–æ–Ω–∏—Å—å, {user.mention} –ø–µ—á–∞—Ç–∞–µ—Ç... –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å, —Å–æ–±–∏—Ä–∏—Å—å —Å –º—ã—Å–ª—è–º–∏, –Ω–∏–∫—Ç–æ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≥–æ–Ω—è–µ—Ç")


@bot.event
async def on_reaction_add(reaction, user):
    print(f"{user.dm_channel} dm_channel")
    print(f"{user} add {reaction}")
    await user.send('content')